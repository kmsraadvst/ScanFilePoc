@page "/Document"
@using BlazorServerUI.RabbitMQ
@using Domain.Contracts
@using Domain.HubEvents
@using Microsoft.AspNetCore.SignalR.Client

@inject Producer<DocumentToScanMessage> Producer
@inject NavigationManager Navigation

<MudStack Class="pa-8 my-12 mx-20">

    <MudText Class="mb-4" Typo="Typo.h3">Document</MudText>
    <MudText Class="mb-12" Typo="Typo.body1" Color="GetColor()">@_statutDocument</MudText>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload Files
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

</MudStack>

@code {
    private string _statutDocument = "NoDocument";

    protected override async Task OnInitializedAsync() {
        HubConnection connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/my-hub"))
            .Build();

        Console.WriteLine($"connection SignalR state 1: {connection.State}");

        await connection.StartAsync();
        Console.WriteLine($"connection SignalR state 2: {connection.State}");

        connection.On<DocumentStatutUpdatedMessage>(
            MyHubEvents.UpdateStatut,
            async (message) => {
                Console.WriteLine("Update Statut Document");
                _statutDocument = message.DocumentStatut;

                await InvokeAsync(StateHasChanged);
            });
    }

    private async Task UploadFiles(IBrowserFile file) {
        _statutDocument = "EnCours";
        var documentId = Guid.NewGuid();

        try
        {
            if (!Directory.Exists("File_Temp")) Directory.CreateDirectory("File_Temp");

            await using var fs = File.Create(Path.Combine("File_Temp", $"{documentId}-{file.Name}"));

            await file.OpenReadStream().CopyToAsync(fs);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        

        Console.WriteLine("Envoie Message Ã  RabbitMQ");
        await Producer.PublishAsync(new DocumentToScanMessage(1045, documentId));
    }

    private Color GetColor() {
        return _statutDocument switch
        {
            "EnCours" => Color.Warning,
            "Corrompu" => Color.Error,
            "Valide" => Color.Success,
            _ => Color.Primary
        };
    }

}