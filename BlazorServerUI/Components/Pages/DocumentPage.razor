
@page "/document/{DemandeAvisId:int}"
@using Domain.Enums

@inject Producer<DocumentToScanMessage> Producer
@inject NavigationManager Navigation
@inject DocumentRepository Repo


<MudText Class="mt-4 ml-4" Typo="Typo.h3">Document de la demande d'avis [@DemandeAvisId]</MudText>

<MudStack Spacing="3" Class="pa-8 my-12 mx-20">

    <MudForm>

        <MudTextField bind-Value="_titre" Label="Titre"/>
        
        <MudSelect @bind-Value="_typeDocument" T="string" Label="Type de document">
            
            @foreach (var type in TypeDocument.All)
            {
                <MudSelectItem T="string" Value="type">@type</MudSelectItem>
            }
            
        </MudSelect>
        
        @if (_file is not null)
        {
            <MudPaper Outlined Elevation="3">
                
                <MudStack Row>
                    
                    <MudText Typo="Typo.body1" Color="Color.Primary">
                        @_file.Name
                    </MudText>

                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="DeleteFile"/>

                </MudStack>
                
            </MudPaper>   
        }
        


        <MudFileUpload @ref="_fileUpload" T="IBrowserFile" FilesChanged="DisplayFile">
            
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload Files
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        
        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            OnClick="AddDocument">
            Add Document
        </MudButton>

    </MudForm>

</MudStack>

@code {
    [Parameter] public int DemandeAvisId { get; set; }

    private MudFileUpload<IBrowserFile> _fileUpload = default!;

    private string _titre = string.Empty;
    private string _typeDocument = string.Empty;

    private IBrowserFile? _file;

    private string _statutDocument = "NoDocument";

    protected override async Task OnInitializedAsync()
    {
        HubConnection connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/my-hub"))
            .Build();

        Console.WriteLine($"connection SignalR state 1: {connection.State}");

        await connection.StartAsync();
        Console.WriteLine($"connection SignalR state 2: {connection.State}");

        connection.On<DocumentStatutUpdatedMessage>(
            MyHubEvents.UpdateStatut,
            async (message) =>
            {
                Console.WriteLine("Update Statut Document");
                _statutDocument = message.DocumentStatut;

                await InvokeAsync(StateHasChanged);
            });
    }

    private async Task DeleteFile()
    {
        await _fileUpload.ClearAsync();

        _file = null;
    }

    private void DisplayFile(IBrowserFile file) => _file = file;

    private async Task AddDocument()
    {
        if (_file is null) return;
        
        var documentToCreate = new Document()
        {
            Titre = _titre,
            Taille = _file.Size,
            NomFichier = _file.Name,
            ContentType = _file.ContentType,
            DemandeAvisId = DemandeAvisId,
            StatutCode = StatutDocument.Verification,
            TypeCode = _typeDocument,
            Extension = GetExtension(_file.Name)
        };

        var documentCreated = await Repo.CreateAsync(documentToCreate);

        if (documentCreated is null) return;
        
        try
        {
            if (!Directory.Exists("File_Temp")) Directory.CreateDirectory("File_Temp");

            await using var fs = File.Create(Path.Combine("File_Temp", $"{documentCreated.Id}-{_file.Name}"));

            await _file.OpenReadStream().CopyToAsync(fs);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await Repo.DeleteAsync(documentCreated.Id);
        }
        
        await _fileUpload.ClearAsync();

        _file = null;
    }

    private Color GetColor() =>
        _statutDocument switch
        {
            "EnCours" => Color.Warning,
            "Corrompu" => Color.Error,
            "Valide" => Color.Success,
            _ => Color.Primary
        };

    private string GetExtension(string fileName) => Path.GetExtension(fileName)[1..];

}