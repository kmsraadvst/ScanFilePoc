
@page "/document/{DemandeAvisId:int}"

@implements IAsyncDisposable

@inject Producer<DocumentToScanMessage> Producer
@inject NavigationManager Navigation


<MudText Class="mt-4 ml-4" Typo="Typo.h3">
    Document de la demande d'avis [@DemandeAvisId]
</MudText>

@if (_connection.State == HubConnectionState.Connected)
{
    <DocumentForm DemandeAvisId="DemandeAvisId" />

    <MudDivider/>
    
    <MudGrid Spacing="4" Class="pa-4 mt-4">
    
        <MudItem xs="4">
            <DocumentList
                DemandeAvisId="DemandeAvisId"
                Type="@TypeDocument.Projet"
                Connection="@_connection"/>
        </MudItem>

        <MudItem xs="4">
            <DocumentList
                DemandeAvisId="DemandeAvisId"
                Type="@TypeDocument.Mandat"
                Connection="@_connection"/>
        </MudItem>

        <MudItem xs="4">
            <DocumentList
                DemandeAvisId="DemandeAvisId"
                Type="@TypeDocument.AnnexeProjet"
                Connection="@_connection"/>
        </MudItem>
    
    </MudGrid>
}



@code {
    
    [Parameter] public int DemandeAvisId { get; set; }

    private HubConnection _connection = default!;
    
    protected override async Task OnInitializedAsync() {
        
        _connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/my-hub"))
            .Build();

        Console.WriteLine($"connection SignalR state 1: {_connection.State}");

        await _connection.StartAsync();
        Console.WriteLine($"connection SignalR state 2: {_connection.State}");

        await _connection.SendAsync("AddToGroup", $"{DemandeAvisId}");
    }

    public async ValueTask DisposeAsync() {
        await _connection.DisposeAsync();
    }

}