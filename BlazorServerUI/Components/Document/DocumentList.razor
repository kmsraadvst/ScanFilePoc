
@inject DocumentRepository Repo

<MudText Class="mb-6" Typo="Typo.h5">Type: @Type</MudText>

@foreach (var document in _documents) {
    <DocumentItem Document="document"/>
}


@code {
    [Parameter] public string Type { get; set; } = string.Empty;
    [Parameter] public int DemandeAvisId { get; set; }
    [Parameter] public HubConnection Connection { get; set; } = default!;

    private IEnumerable<Document> _documents = [];

    protected override async Task OnInitializedAsync() {
        // await LoadDocumentsAsync();
        _documents = await Repo.GetAllAsync(Type, DemandeAvisId);

        Console.WriteLine($"In List Document Connection State :{Connection.State}");
        Console.WriteLine($"Event Hub {GetEventHub()}");

        Connection.On(GetEventHub(), async () => await LoadDocumentsAsync());
    }

    private async Task LoadDocumentsAsync() {
        
        Console.WriteLine($"Event Hub Received (callback) {GetEventHub()}");

        _documents = await Repo.GetAllAsync(Type, DemandeAvisId);

        await InvokeAsync(StateHasChanged);
    }

    private string GetEventHub() => Type switch
    {
        _ when Type == TypeDocument.Projet => MyHubEvents.RefreshProjet,
        _ when Type == TypeDocument.Mandat => MyHubEvents.RefreshMandat,
        _ when Type == TypeDocument.AnnexeProjet => MyHubEvents.RefreshAnnexe,
        _ => throw new ArgumentOutOfRangeException()
    };

}