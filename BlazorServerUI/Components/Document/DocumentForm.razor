@using Domain.Contracts.Messages
@using Domain.Exceptions

@inject DocumentRepository Repo
@inject Producer<DocumentMessage> Producer
@inject ILogger<DocumentForm> Logger
@inject ISnackbar Snackbar


<MudForm>
    <MudGrid Class="pa-8 my-12 mx-20" Style="width: 840px">

        <MudItem xs="6">

            <MudTextField T="string" @bind-Value="_titre" Label="Titre"/>

        </MudItem>

        <MudItem xs="6">

            <MudSelect @bind-Value="_typeDocument" T="string" Label="Type de document">

                @foreach (var type in TypeDocument.All)
                {
                    <MudSelectItem T="string" Value="type">@type</MudSelectItem>
                }

            </MudSelect>

        </MudItem>


        <MudItem xs="4" Class="align-self-center">

            <MudFileUpload @ref="_fileUpload" T="IBrowserFile" FilesChanged="DisplayFile">

                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Dark"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

        </MudItem>

        <MudItem xs="8">

            @if (_file is not null)
            {
                <MudPaper Class="pa-4 grey" Outlined Elevation="3">

                    <MudStack Row AlignItems="AlignItems.Center">

                        <MudText Typo="Typo.body1" Color="Color.Primary">
                            @_file.Name
                        </MudText>

                        <MudIconButton
                            Class="ml-auto"
                            Icon="@Icons.Material.Filled.Close"
                            OnClick="DeleteFile"/>

                    </MudStack>

                </MudPaper>
            }
        </MudItem>

        <MudItem xs="12" Class="mt-6">

            <MudButton
                Class="pa-3"
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="AddDocument"
                Size="Size.Large">
                Add Document
            </MudButton>
        </MudItem>

    </MudGrid>

</MudForm>

@code {
    [Parameter] public int DemandeAvisId { get; set; }

    private MudFileUpload<IBrowserFile> _fileUpload = default!;

    private const long MaxAllowedSize = 1024 * 1024 * 1024;

    private string _titre = string.Empty;
    private string _typeDocument = string.Empty;

    private IBrowserFile? _file;


    private async Task DeleteFile()
    {
        await _fileUpload.ClearAsync();

        _file = null;
    }

    private void DisplayFile(IBrowserFile file) => _file = file;

    private async Task AddDocument()
    {
        if (_file is null)
        {
            Logger.LogWarning("Aucun fichier sélectionné.");
            Snackbar.Add("Veuillez sélectionner un fichier.", Severity.Warning);
            return;
        }

        // 1. Vérifier RabbitMQ
        try
        {
            await Producer.EnsureIsStartedAsync();
        }
        catch (RabbitMqUnavailableException ex)
        {
            Logger.LogError(ex, "RabbitMQ non disponible.");
            Snackbar.Add("Le serveur de messagerie est indisponible. Réessayez plus tard.", Severity.Error);
            return;
        }

        // 2. Créer le document en base
        var documentToCreate = new Document
        {
            Titre = _titre,
            Taille = _file.Size,
            NomFichier = _file.Name,
            ContentType = _file.ContentType,
            DemandeAvisId = DemandeAvisId,
            StatutCode = StatutDocument.Verification,
            TypeCode = _typeDocument,
            Extension = GetExtension(_file.Name)
        };

        Document? documentCreated = null;

        try
        {
            documentCreated = await Repo.CreateAsync(documentToCreate);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors de la création du document en base.");
            Snackbar.Add("Erreur lors de l'enregistrement du document.", Severity.Error);
            return;
        }

        if (documentCreated is null)
        {
            Logger.LogError("Le document n'a pas été créé (CreateAsync a retourné null).");
            Snackbar.Add("Impossible d'enregistrer le document.", Severity.Error);
            return;
        }

        // 3. Sauvegarder le fichier
        var tempPath = DocumentUtilities.GetTempPath(documentCreated);

        try
        {
            EnsureTempDirectoryExists();
            await using var fs = File.Create(tempPath);
            await _file.OpenReadStream(MaxAllowedSize).CopyToAsync(fs);
        }
        catch (Exception ex)
        {
            Logger.LogError(
                ex,
                $"Erreur lors de l'enregistrement du fichier sur le disque. Roolback sur le Document {documentCreated.Id}"
            );
            Snackbar.Add("Erreur lors de l'enregistrement du fichier.", Severity.Error);

            File.Delete(tempPath);
            await Repo.DeleteAsync(documentCreated.Id);
            return;
        }

        // 4. Envoyer le message à RabbitMQ
        var message = new DocumentMessage(
            DocumentId: documentCreated.Id,
            DemandeAvisId: documentCreated.DemandeAvisId,
            UtilisateurId: 2);

        try
        {
            await Producer.PublishAsync(message);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors de l'envoi du message RabbitMQ.");
            Snackbar.Add("Le document a été enregistré mais n'a pas pu être traité automatiquement.", Severity.Warning);
            // ici, tu pourrais marquer le document pour un retry ultérieur si besoin
        }

        // 5. Nettoyage UI
        await _fileUpload.ClearAsync();
        _file = null;

        Snackbar.Add("Document ajouté avec succès.", Severity.Success);
    }

    private void EnsureTempDirectoryExists()
    {
        if (!Directory.Exists(DocumentUtilities.TempRootPath))
            Directory.CreateDirectory(DocumentUtilities.TempRootPath);
    }


    private static string GetExtension(string fileName) => Path.GetExtension(fileName)[1..];

}