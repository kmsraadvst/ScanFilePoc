
@inject DocumentRepository Repo


<MudCard Class="mb-4">
    <MudCardHeader>

        <CardHeaderContent>

            <MudStack Row AlignItems="AlignItems.Center">
                <MudChip T="string" Variant="Variant.Text" Color="Color.Primary">
                    @Document.TypeCode
                </MudChip>

                <MudText Color="@(GetColor(Document.StatutCode))">
                    @Document.StatutCode
                </MudText>
            </MudStack>
            
            <MudText Typo="Typo.h6">@Document.Titre</MudText>
            
        </CardHeaderContent>

        <CardHeaderActions>
            <MudIconButton
                Icon="@Icons.Material.Filled.Delete"
                Color="Color.Error"
                OnClick="@DeleteDocument"/>
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent>

        <MudText Style="color:#6c6c6c" Typo="Typo.body1">

            @Document.NomFichier

        </MudText>
        
        <MudDivider Class="my-2"/>

        <MudText Typo="Typo.caption">
            @Document.ContentType | @(Document.Taille / 1024) Ko
        </MudText>

    </MudCardContent>

</MudCard>

@code {
    [Parameter] public Document Document { get; set; } = new();

    private async Task DeleteDocument()
    {
        try
        {
            File.Delete(DocumentUtilities.GetPath(Document));
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return;
        }

        await Repo.DeleteAsync(Document.Id);
    }

    private Color GetColor(string statusCode) =>
        statusCode switch
        {
            "Verification" => Color.Warning,
            "Corrompu" => Color.Error,
            "Valide" => Color.Success,
            _ => Color.Primary
        };

}